@use 'sass:math';
@forward 'sass:math';

@use 'sass:map';
@use 'sass:string';

$number-map: (
	'0': 0,
	'1': 1,
	'2': 2,
	'3': 3,
	'4': 4,
	'5': 5,
	'6': 6,
	'7': 7,
	'8': 8,
	'9': 9,
);

/**
 * 文字列を数値へ変換する
 * 
 * * @example
 * number("40"); // => 40
 *
 * * @example
 * number(80px); // => 80
 */
@function number($string) {
	$string: #{$string};
	$length: string.length($string);

	$result: 0;

	$minus: false;
	$decimal: null;

	$i: 1;
	@while $i < $length {
		$char: string.slice($string, $i, $i);

		// マイナスの文字が取得できた時
		@if $char == '-' {
			$minus: true;

			// 小数点だったとき
		} @else if $char == '.' {
			$decimal: 1;

			// その他の場合
		} @else {
			$number: map.get($number-map, $char);

			@if $number {
				$result: ($result * 10) + $number;

				// 浮遊小数点である場合、最後に小数点をずらすために値を保存しておく
				@if $decimal {
					$decimal: $decimal * 10;
				}

				// 数字以外を取得した場合、ループ処理を終了する
			} @else {
				// 処理を中断
				$i: $length;
			}
		}

		$i: $i + 1;
	}

	// 小数点の調整
	$result: if($decimal, math.div($result, $decimal), $result);

	// マイナスの調節
	@return if($minus, -($result), $result);
}

$unit-map: (
	vw: 0vw,
	vh: 0vh,
	vmin: 0vmin,
	vmax: 0vmax,
	px: 0px,
	rem: 0rem,
	em: 0em,
) !default;
/**
 * 単位変換するための大きさのない値を取得する
 * 
 * * @example
 * number(vw); // => 0vw
 *
 * * @example
 * number(wpx); // => wh
 */
@function unit($unit) {
	$unit: string.unquote($unit);
	@return map.get($unit_map, $unit) or 0;
}
